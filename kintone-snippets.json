{
	"kintoneEventOn": {
		"prefix": "ke",
		"body": [
			"kintone.events.on('${1|mobile.app.record.index.show,app.record.index.show,app.record.index.edit.show,app.record.index.edit.submit,app.record.index.edit.submit.success,app.record.index.edit.change.<fieldcode>|}', function(event) {",
			"\t$0",
			"\treturn event;",
			"});"
		],
		"description": "Registers an event handler of the kintone"
	},
	"kintoneEventOnPromise": {
		"prefix": "kepromise",
		"body": [
			"kintone.events.on('${1|app.record.create.submit,app.record.edit.submit,app.record.index.edit.submit,app.record.index.delete.submit,app.record.detail.process.proceed,app.record.detail.delete.submit,app.record.create.submit.success,app.record.edit.submit.success,mobile.app.record.create.submit,mobile.app.record.edit.submit|}', function(event) {",
			"\t$0",
			"\treturn new kintone.Promise(function(resolve, reject) {",
			"\t\t$2//resolve a promise function handler",
			"\t\tkintone.api(pathOrUrl, method, params, function(resp) { ",
			"\t\t\tresolve(resp);",
			"\t\t});",
			"\t}).then(function(resp) { ",
			"\t$3//handle response from above promise here",
			"\treturn event;",
			"});"
		],
		"description": "Registers an event handler of the kintone and return Promise"
	},
	"kintoneAPIPromise": {
		"prefix": "kapipromise",
		"body": [
			"kintone.api(pathOrUrl, method, params).then(function(resp) {",
			"\t\t//This should resolve first",
			"\t\t$1",
			"\t}).catch(function(error) {",
			"\t\t//If an error is included in the response message, show it",
			"\t\t$0",
			"\t});"
		],
		"description": "Send REST APIs request using Promise"
	},

	"kintoneProxyPromise": {
		"prefix": "kproxypromise",
		"body": [
			"kintone.proxy('url', '${1|GET,POST,PUT,DELETE|}', {} /* headers */, {} /* data */).then(function(args) {",
			"\t\t/*  args[0] -> body(string)",
			"\t\t/*  args[1] -> status(number)",
			"\t\t/*  args[2] -> headers(object)",
			"\t\t*/",
			"\t\t$2",
			"\t}, function(error) {",
			"\t\t//Display the response body (string) from the proxy API",
			"\t\t$0",
			"\t});"
		],
		"description": "Use kintone proxy to send external request with Promise"
	},
	"kintoneProxyUploadPromise": {
		"prefix": "kproxyuploadpromise",
		"body": [
			"kintone.proxy.upload('url', '${1|POST,PUT|}', {} /* headers */, {} /* data */).then(function(args) {",
			"\t\t/*  args[0] -> body(string)",
			"\t\t/*  args[1] -> status(number)",
			"\t\t/*  args[2] -> headers(object)",
			"\t\t*/",
			"\t\t$2",
			"\t}, function(error) {",
			"\t\t//Display the response body (string) from the proxy API",
			"\t\t$0",
			"\t});"
		],
		"description": "Use kintone proxy upload to upload a file to outside of kintone with Promise"
	},
	"kintoneRequest": {
		"prefix": "ka",
		"body": [
			"kintone.api(kintone.api.url('/k/v1/${1|app,apps,app/deploy,app/form/fieldsfields,app/form/layoutlayout,app/viewviewsviews,app/status,records,record|}', true), '${2|GET,POST,UPDATE,DELETE|}', ${body}, function(resp) {",
			"\tconsole.log(resp);",
			"\t$0",
			"}, function(error) {",
			"\tconsole.log(error);",
			"});"
		],
		"description": "event of the kintone"	
	},

	"kintonePluginProxyPromise": {
		"prefix": "kplproxypromise",
		"body": [
			"kintone.plugin.app.proxy('pluginId', 'url', '${1|GET,POST,PUT,DELETE|}', {} /* headers */, {} /* data */).then(function(args) {",
			"\t\t/*  args[0] -> body(string)",
			"\t\t/*  args[1] -> status(number)",
			"\t\t/*  args[2] -> headers(object)",
			"\t\t*/",
			"\t\t$2",
			"\t}, function(error) {",
			"\t\t//Display the response body (string) from the proxy API",
			"\t\t$0",
			"\t});"
		],
		"description": "Use kintone proxy to send external request in plugin with Promise"
	},

	"kintonePluginProxyUploadPromise": {
		"prefix": "kplproxyuploadpromise",
		"body": [
			"kintone.plugin.app.proxy.upload('pluginId', 'url', '${1|POST,PUT|}', {} /* headers */, {} /* data */).then(function(args) {",
			"\t\t/*  args[0] -> body(string)",
			"\t\t/*  args[1] -> status(number)",
			"\t\t/*  args[2] -> headers(object)",
			"\t\t*/",
			"\t\t$2",
			"\t}, function(error) {",
			"\t\t//Display the response body (string) from the proxy API",
			"\t\t$0",
			"\t});"
		],
		"description": "Use kintone proxy to upload in plugin with Promise"
	}
	
}